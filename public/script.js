// ‚úÖ D√©finition des variables pour g√©rer l'affichage du calendrier
let currentYear = new Date().getFullYear();
let currentMonth = new Date().getMonth() + 1;

document.addEventListener("DOMContentLoaded", () => {
    checkLogin();
    loadCalendar();
});

// ‚úÖ V√©rifier la connexion utilisateur
function checkLogin() {
    const token = localStorage.getItem("jwt");

    if (!token) {
        alert("Vous devez √™tre connect√© !");
        window.location.href = "login.html";
        return;
    }

    fetch("/api/auth/user", {
        method: "GET",
        headers: { "Authorization": `Bearer ${token}` }
    })
    .then(response => {
        if (response.status === 401 || response.status === 403) {
            alert("Votre session a expir√©, veuillez vous reconnecter.");
            localStorage.removeItem("jwt");
            window.location.href = "login.html";
        } else {
            document.getElementById("logoutButton").style.display = "inline-block";
        }
    })
    .catch(error => {
        console.error("‚ùå Erreur de v√©rification du token :", error);
    });
}

// ‚úÖ Charger le calendrier des entra√Ænements g√©n√©r√©s
async function loadCalendar(year = currentYear, month = currentMonth) {
    currentYear = year;
    currentMonth = month;

    const token = localStorage.getItem("jwt");
    if (!token) return;

    try {
        console.log(`üìå Chargement des entra√Ænements g√©n√©r√©s pour ${year}-${month}`);

        const response = await fetch(`/api/getTrainings?year=${year}&month=${month}`, {
            method: "GET",
            headers: { "Authorization": `Bearer ${token}` }
        });

        if (!response.ok) {
            if (response.status === 401) {
                alert("Votre session a expir√©, veuillez vous reconnecter.");
                localStorage.removeItem("jwt");
                window.location.href = "login.html";
            }
            throw new Error("Erreur lors de la r√©cup√©ration des entra√Ænements.");
        }

        const trainings = await response.json();
        console.log("üìå Entra√Ænements re√ßus :", trainings);

        displayCalendar(trainings, year, month);
        displayTrainings(trainings);
    } catch (error) {
        console.error("‚ùå Erreur lors du chargement du calendrier :", error);
    }
}

// ‚úÖ Fonction pour afficher le calendrier
function displayCalendar(trainings, year, month) {
    console.log("üìå Affichage du calendrier pour", year, month, "avec entra√Ænements :", trainings);

    const calendarDiv = document.getElementById("calendar");
    if (!calendarDiv) {
        console.error("‚ùå Erreur : l'√©l√©ment #calendar est introuvable.");
        return;
    }

    calendarDiv.innerHTML = "";
}

// ‚úÖ Afficher les entra√Ænements sous le calendrier
function displayTrainings(trainings) {
    const list = document.getElementById("training-list");
    list.innerHTML = "";

    if (trainings.length === 0) {
        list.innerHTML = "<p>Aucun entra√Ænement g√©n√©r√©.</p>";
        return;
    }

    trainings.forEach(session => {
        const item = document.createElement("li");
        item.textContent = `${session.date}: ${session.type} (${session.duration} min) - ${session.intensity}`;
        list.appendChild(item);
    });
}

// ‚úÖ Bouton pour g√©n√©rer un plan
document.getElementById("generate-plan").addEventListener("click", async () => {
    const response = await fetch("/api/plan/generate", { 
        method: "POST", 
        headers: { "Authorization": `Bearer ${localStorage.getItem("jwt")}` } 
    });

    const data = await response.json();

    if (data.success) {
        alert("‚úÖ Plan d'entra√Ænement g√©n√©r√© avec succ√®s !");
        loadCalendar();
    } else {
        alert("‚ùå Erreur lors de la g√©n√©ration du plan.");
    }
});

// ‚úÖ Correction du changement de mois
function changeMonth(direction) {
    let newMonth = currentMonth + direction;
    let newYear = currentYear;

    if (newMonth < 1) {
        newMonth = 12;
        newYear--;
    } else if (newMonth > 12) {
        newMonth = 1;
        newYear++;
    }

    console.log(`üìå Changement de mois : ${newYear}-${newMonth}`);
    loadCalendar(newYear, newMonth);
}
