const fetch = require("node-fetch");

async function generateTrainingPlanAI(data) {
    console.log("üì° Envoi des donn√©es √† l'IA...");

    const today = new Date();
    const endDate = new Date(data.dateEvent);
    const weeksBeforeEvent = Math.ceil((endDate - today) / (1000 * 60 * 60 * 24 * 7));

    const prompt = `
Je suis un coach expert en entra√Ænement running et trail. Mon utilisateur souhaite un plan d'entra√Ænement **personnalis√©** pour atteindre son objectif : **${data.objectif}**.

---

### üìå **Informations utilisateur et contexte**
- **Type de terrain** : ${data.deniveleTotal > 0 ? "Trail (avec d√©nivel√©)" : "Route (terrain plat)"}
- **D√©nivel√© total de la course** : ${data.deniveleTotal} m√®tres
- **Temps restant avant la course** : ${weeksBeforeEvent} semaines (du ${today.toISOString().split("T")[0]} au ${endDate.toISOString().split("T")[0]})
- **Fr√©quence d'entra√Ænement** : ${data.nbSeances} s√©ances par semaine (${data.joursSelectionnes.join(", ")})
- **Jour de la sortie longue** : ${data.sortieLongue}
- **Objectifs interm√©diaires** :
  ${data.objectifsIntermediaires.length > 0 ? data.objectifsIntermediaires.map(obj => `- ${obj.type} le ${obj.date}`).join("\n  ") : "Aucun"}

---

### üìå **Profil de l'athl√®te**
- **Vitesse Maximale A√©robie (VMA)** : ${data.vmaEstimee ? data.vmaEstimee + " km/h" : "Non connue, estimez-la en fonction de l'√¢ge et du niveau"}
- **Fr√©quence Cardiaque Maximale (FC Max)** : ${data.fcMaxEstimee ? data.fcMaxEstimee + " bpm" : "Non connue"}
- **Allures de r√©f√©rence** :
  - 5 km : ${data.alluresReference?.["5km"] || "Non connue"}
  - 10 km : ${data.alluresReference?.["10km"] || "Non connue"}
  - Semi-marathon : ${data.alluresReference?.["semi"] || "Non connue"}
  - Marathon : ${data.alluresReference?.["marathon"] || "Non connue"}
- **Blessures pass√©es** : ${data.blessures || "Aucune"}
- **Autres sports pratiqu√©s** : ${data.autresSports || "Aucun"}
- **Contraintes personnelles** : ${data.contraintes || "Aucune"}
- **Types de s√©ances privil√©gi√©es** : ${data.typesSeances || "Non pr√©cis√©es"}
- **Recommandations nutritionnelles** : ${data.nutrition || "Non pr√©cis√©es"}
- **M√©thodes de r√©cup√©ration privil√©gi√©es** : ${data.recuperation || "Non pr√©cis√©es"}

---

### üìå **Principes de structuration du plan d‚Äôentra√Ænement**
1. **Progression optimis√©e** :
   - Charge progressive pour √©viter les blessures.
   - Alternance entre charge et r√©cup√©ration pour une adaptation optimale.
   - R√©duction progressive de la charge avant les courses interm√©diaires et l‚Äôobjectif final (tapering).

2. **Int√©gration des courses interm√©diaires** :
   - **R√©duction de charge avant une course** pour √™tre en forme.
   - **R√©cup√©ration apr√®s une course** pour √©viter la fatigue excessive.
   - **Int√©gration des courses interm√©diaires comme des s√©ances cl√©s**.

3. **S√©ances adapt√©es au profil et √† l‚Äôobjectif** :
   - **Endurance fondamentale** : consolidation de l‚Äôa√©robie.
   - **Fractionn√©/VMA** : am√©lioration de la puissance et de l‚Äô√©conomie de course.
   - **Seuil ana√©robie** : optimisation de la gestion de l‚Äôeffort prolong√©.
   - **C√¥tes et renforcement musculaire** : pr√©paration sp√©cifique au d√©nivel√© (si besoin).
   - **Sorties longues** : d√©veloppement de l‚Äôendurance et de la r√©sistance mentale.
   - **Travail de descente** : uniquement si le terrain l‚Äôexige (trail).

4. **Personnalisation des s√©ances** :
   - **S√©ances ajust√©es en intensit√© et dur√©e selon le niveau**.
   - **Prise en compte des disponibilit√©s de l‚Äôutilisateur**.
   - **Conseils sp√©cifiques pour la nutrition et la r√©cup√©ration**.

---

### üìå **Format de r√©ponse attendu (JSON uniquement)**
R√©ponds **exclusivement en JSON**, sans texte suppl√©mentaire. La structure doit respecter ce format :

\`\`\`json
[
  {
    "date": "YYYY-MM-DD",
    "type": "Endurance",
    "intensite": "Mod√©r√©e",
    "duree": 60,
    "echauffement": "15 min footing en zone 2",
    "recuperation": "10 min footing en zone 1",
    "fc_cible": "Zone 2 - A√©robie (65-75%)",
    "details": "S√©ance d‚Äôendurance fondamentale visant √† renforcer l‚Äôa√©robie.",
    "objectif_intermediaire": false
  },
  {
    "date": "YYYY-MM-DD",
    "type": "Fractionn√©",
    "intensite": "√âlev√©e",
    "duree": 45,
    "echauffement": "20 min √©chauffement progressif",
    "recuperation": "15 min retour au calme",
    "fc_cible": "Zone 4 - Ana√©robie (90-100%)",
    "details": "5x1000m √† allure 10km avec 1'30'' de r√©cup√©ration active.",
    "objectif_intermediaire": true
  }
]
\`\`\`

---

### üìå **R√®gles strictes :**
1. **R√©ponds uniquement en JSON** (pas d'explications ni de texte autour).  
2. **Chaque objet repr√©sente une s√©ance** avec **une date, un type et des d√©tails pr√©cis**.  
3. **Ajoute des s√©ances adapt√©es aux courses interm√©diaires** (\`"objectif_intermediaire": true\`).  
4. **Le nombre total de s√©ances correspond √† la fr√©quence hebdomadaire demand√©e**.  
5. **Adapte la charge et l‚Äôintensit√© en fonction du niveau et des contraintes**.  
6. **Si la VMA ou FC Max sont inconnues, estime-les selon l'√¢ge et le niveau**.  
7. **Prends en compte la r√©cup√©ration et le tapering avant les courses**.  
8. **Ajoute des s√©ances de c√¥tes uniquement si le terrain l'exige**.

---

### üìå **Maintenant, g√©n√®re un plan d‚Äôentra√Ænement en respectant ces r√®gles**.
‚ö†Ô∏è **Le format JSON doit √™tre strictement conforme au mod√®le ci-dessus.**  
Si une donn√©e est inconnue, adapte-toi en utilisant une estimation pertinente.
`;

    try {
        const response = await fetch("https://api.openai.com/v1/completions", {
            method: "POST",
            headers: {
                "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`,
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                model: "gpt-4-turbo",
                prompt,
                max_tokens: 1024,
                temperature: 0.7,
                n: 1
            })
        });

        const result = await response.json();
        if (!result.choices || !result.choices[0].text) {
            throw new Error("R√©ponse vide de l'IA");
        }

        console.log("‚úÖ R√©ponse de l'IA re√ßue !");
        return JSON.parse(result.choices[0].text);
    } catch (error) {
        console.error("‚ùå Erreur lors de l'appel √† l'IA :", error);
        return [];
    }
}

module.exports = generateTrainingPlanAI;
