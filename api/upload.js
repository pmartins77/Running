const express = require("express");
const { Pool } = require("pg");
const jwt = require("jsonwebtoken");

const router = express.Router();
const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: { rejectUnauthorized: false },
});

const SECRET_KEY = process.env.JWT_SECRET || "supersecretkey";

// ‚úÖ Middleware pour v√©rifier l'authentification
function authenticateToken(req, res, next) {
    const token = req.headers.authorization?.split(" ")[1];

    if (!token) {
        return res.status(401).json({ error: "Non autoris√©." });
    }

    jwt.verify(token, SECRET_KEY, (err, user) => {
        if (err) {
            return res.status(403).json({ error: "Token invalide." });
        }
        req.userId = user.userId;
        next();
    });
}

// ‚úÖ Route pour importer un fichier CSV (chaque entra√Ænement est li√© √† l'utilisateur connect√©)
router.post("/", authenticateToken, async (req, res) => {
    try {
        const trainings = req.body;
        const userId = req.userId; // R√©cup√©rer l'utilisateur connect√©

        if (!Array.isArray(trainings) || trainings.length === 0) {
            return res.status(400).json({ error: "Donn√©es invalides." });
        }

        const client = await pool.connect();

        for (const training of trainings) {
            console.log("üìå Donn√©es re√ßues pour insertion :", training); // DEBUG

            // V√©rification du nombre de colonnes
            if (!training.date || !training.echauffement || !training.type || !training.duration || !training.intensity || !training.details) {
                console.warn("‚ùå Ligne ignor√©e (colonnes manquantes) :", training);
                continue;
            }

            await client.query(
                `INSERT INTO trainings (date, echauffement, type, duration, intensity, details, user_id) 
                 VALUES ($1, $2, $3, $4, $5, $6, $7)`,
                [training.date, training.echauffement, training.type, training.duration, training.intensity, training.details, userId]
            );
        }

        client.release();
        res.status(200).json({ message: "‚úÖ Importation r√©ussie !" });

    } catch (error) {
        console.error("‚ùå Erreur importation CSV :", error);
        res.status(500).json({ error: "Erreur lors de l'importation." });
    }
});

module.exports = router;
