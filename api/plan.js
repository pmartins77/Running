const express = require("express");
const router = express.Router();
const generateTrainingPlanAI = require("./aiPlan"); // üîÑ Appel √† l'IA
const authMiddleware = require("./authMiddleware");
const db = require("./db");

router.post("/generate", authMiddleware, async (req, res) => {
    try {
        console.log("üîç V√©rification `req.userId` dans plan.js :", req.userId);
        const userId = req.userId;
        if (!userId) {
            console.error("‚ùå Erreur : `req.userId` est undefined !");
            return res.status(401).json({ error: "Utilisateur non authentifi√©." });
        }

        const {
            objectif,
            intensite,
            terrain,
            dateEvent,
            nbSeances,
            joursSelectionnes,
            sortieLongue,
            vma,
            fcMax,
            allures,
            blessures,
            autresSports,
            contraintes,
            nutrition,
            recuperation
        } = req.body;

        console.log("üìå Donn√©es re√ßues :", req.body);

        // V√©rification des champs obligatoires
        if (!objectif || !intensite || !terrain || !dateEvent || !nbSeances || joursSelectionnes.length === 0) {
            console.error("‚ùå Erreur : Champs obligatoires manquants !");
            return res.status(400).json({ error: "Veuillez remplir tous les champs obligatoires." });
        }

        // V√©rifier que sortieLongue est bien renseign√©
        if (!sortieLongue) {
            console.warn("‚ö†Ô∏è Avertissement : Aucun jour de sortie longue sp√©cifi√© !");
        }

        // üîπ Ins√©rer l'objectif principal
        console.log("üìå Insertion de l'objectif principal...");
        const objectifPrincipal = await db.query(
            `INSERT INTO objectifs 
             (user_id, type, date_event, terrain, intensite, nb_seances, sortie_longue, jours_seances, vma_estimee, fc_max_estimee, allures_reference, blessures, autres_sports, contraintes, nutrition, recuperation, est_principal) 
             VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, TRUE) RETURNING id`,
            [userId, objectif, dateEvent, terrain, intensite, nbSeances, sortieLongue, joursSelectionnes, vma, fcMax, allures, blessures, autresSports, contraintes, nutrition, recuperation]
        );

        const objectifPrincipalId = objectifPrincipal.rows[0].id;
        console.log("‚úÖ Objectif principal ins√©r√© avec ID :", objectifPrincipalId);

        // üîπ G√©n√©ration du plan d'entra√Ænement avec IA
        console.log("üìå Appel √† generateTrainingPlanAI...");
        const plan = await generateTrainingPlanAI({
            objectif,
            dateEvent,
            terrain,
            intensite,
            nbSeances,
            joursSelectionnes,
            sortieLongue,
            vma,
            fcMax,
            allures,
            blessures,
            autresSports,
            contraintes,
            nutrition,
            recuperation
        });

        // V√©rification du plan g√©n√©r√©
        if (!plan || plan.length === 0) {
            console.error("‚ùå Aucune s√©ance g√©n√©r√©e !");
            return res.status(400).json({ error: "Le plan d'entra√Ænement n'a pas pu √™tre g√©n√©r√©." });
        }

        console.log(`‚úÖ Plan g√©n√©r√© avec succ√®s ! Nombre de s√©ances : ${plan.length}`);

        // üîπ Ins√©rer le plan g√©n√©r√© dans la base de donn√©es
        console.log("üìå Enregistrement du plan d'entra√Ænement en base...");
        for (const session of plan) {
            await db.query(
                `INSERT INTO trainings 
                 (user_id, objectif_id, date, duration, type, intensity, echauffement, recuperation, fc_cible, details, planifie_par_ai) 
                 VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, TRUE)`,
                [userId, objectifPrincipalId, session.date, session.duree, session.type, session.intensite, session.echauffement, session.recuperation, session.fc_cible, session.details]
            );
        }

        console.log("‚úÖ Plan enregistr√© en base !");
        res.json({ success: true, plan });

    } catch (error) {
        console.error("‚ùå Erreur lors de la g√©n√©ration du plan :", error);
        res.status(500).json({ success: false, message: error.message });
    }
});

module.exports = router;
