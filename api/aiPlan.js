const fetch = require("node-fetch");

async function generateTrainingPlanAI(data) {
    console.log("üì° Envoi des donn√©es √† l'IA OpenAI...");
    console.log("üîë Cl√© API OpenAI utilis√©e :", process.env.OPENAI_API_KEY ? "OK" : "NON D√âFINIE");

    const today = new Date();
    const endDate = new Date(data.dateEvent);

    // V√©rification de la date pour √©viter les erreurs `Invalid time value`
    if (isNaN(endDate.getTime())) {
        console.error("‚ùå Erreur : La date de l'√©v√©nement est invalide :", data.dateEvent);
        return [];
    }

    const weeksBeforeEvent = Math.ceil((endDate - today) / (1000 * 60 * 60 * 24 * 7));

    const prompt = `
Je suis un coach expert en entra√Ænement running et trail. Mon utilisateur souhaite un plan d'entra√Ænement **personnalis√©** pour atteindre son objectif : **${data.objectif}**.

---

### üìå **Informations utilisateur et contexte**
- **Type de terrain** : ${data.terrain}
- **D√©nivel√© total de la course** : ${data.deniveleTotal || "Non pr√©cis√©"} m√®tres
- **Temps restant avant la course** : ${weeksBeforeEvent} semaines
- **Fr√©quence d'entra√Ænement** : ${data.nbSeances} s√©ances par semaine (${data.joursSelectionnes.join(", ")})
- **Jour de la sortie longue** : ${data.sortieLongue || "Non pr√©cis√©"}

---

### üìå **Profil de l'athl√®te**
- **Vitesse Maximale A√©robie (VMA)** : ${data.vma || "√Ä estimer"}
- **Fr√©quence Cardiaque Maximale (FC Max)** : ${data.fcMax || "√Ä estimer"}
- **Allures de r√©f√©rence** : ${data.allures ? JSON.stringify(data.allures) : "Non fournies"}
- **Blessures pass√©es** : ${data.blessures || "Aucune"}
- **Autres sports pratiqu√©s** : ${data.autresSports || "Aucun"}
- **Contraintes personnelles** : ${data.contraintes || "Aucune"}
- **Recommandations nutritionnelles** : ${data.nutrition || "Non pr√©cis√©es"}
- **M√©thodes de r√©cup√©ration privil√©gi√©es** : ${data.recuperation || "Non pr√©cis√©es"}

---

### üìå **Format de r√©ponse attendu (JSON uniquement)**
R√©ponds **exclusivement en JSON**, sans texte suppl√©mentaire. La structure doit respecter ce format :

\`\`\`json
[
  {
    "date": "YYYY-MM-DD",
    "type": "Endurance",
    "intensite": "Mod√©r√©e",
    "duree": 60,
    "echauffement": "15 min footing en zone 2",
    "recuperation": "10 min footing en zone 1",
    "fc_cible": "Zone 2 - A√©robie (65-75%)",
    "details": "S√©ance d‚Äôendurance fondamentale visant √† renforcer l‚Äôa√©robie.",
    "objectif_intermediaire": false
  }
]
\`\`\`

### üìå **Maintenant, g√©n√®re un plan d‚Äôentra√Ænement en respectant ces r√®gles.**`;

    try {
        const response = await fetch("https://api.openai.com/v1/chat/completions", {
            method: "POST",
            headers: {
                "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`,
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                model: "gpt-4o",
                messages: [
                    { role: "system", content: "Tu es un coach expert en course √† pied et en trail. G√©n√®re un plan d'entra√Ænement personnalis√© bas√© sur les informations suivantes." },
                    { role: "user", content: prompt }
                ],
                max_tokens: 1024,
                temperature: 0.7,
                n: 1
            })
        });

        const result = await response.json();
        console.log("üì© R√©ponse brute OpenAI :", JSON.stringify(result, null, 2));

        // V√©rification que la r√©ponse contient bien un JSON valide
        if (!result.choices || !result.choices[0].message || !result.choices[0].message.content) {
            throw new Error("R√©ponse vide ou mal formatt√©e de l'IA");
        }

        const aiResponse = result.choices[0].message.content.trim(); // Trim pour √©viter les espaces invisibles
        console.log("üì© R√©ponse texte OpenAI :", aiResponse);

        try {
            return JSON.parse(aiResponse);
        } catch (jsonError) {
            console.error("‚ùå Erreur JSON lors du parsing :", jsonError, "\nR√©ponse IA brute :", aiResponse);
            return [];
        }

    } catch (error) {
        console.error("‚ùå Erreur lors de l'appel √† l'IA :", error);
        return [];
    }
}

module.exports = generateTrainingPlanAI;
