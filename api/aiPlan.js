const openai = require("openai"); // Assurez-vous que la biblioth√®que OpenAI est install√©e
const db = require("./db");

async function generateTrainingPlanAI(userId, trainingData) {
    console.log("üìå D√©but de la g√©n√©ration du plan via IA pour l'utilisateur :", userId);

    const {
        objectifPrincipalId,
        dateEvent,
        joursSelectionnes,
        sortieLongue,
        nbSeances,
        deniveleTotal,
        objectifsIntermediaires, // üìå Liste des courses interm√©diaires
        VMA,
        FCMax,
        allure5km,
        allure10km,
        allureSemi,
        allureMarathon,
        blessures,
        autresSports,
        contraintes,
        typesSeances,
        nutrition,
        recuperation
    } = trainingData;

    const today = new Date(); // üìÖ D√©but du plan = date actuelle
    const endDate = new Date(dateEvent); // üìÖ Fin du plan = date de la course principale
    const weeksBeforeEvent = Math.ceil((endDate - today) / (1000 * 60 * 60 * 24 * 7));

    // üîπ Cr√©ation du prompt pour l'IA
    const prompt = `
Je suis un coach expert en entra√Ænement running et trail. Mon utilisateur souhaite un plan d'entra√Ænement personnalis√© pour atteindre son objectif de ${nbSeances} s√©ances/semaine.

### Informations cl√©s :
- **Type de terrain** : ${deniveleTotal > 0 ? "Trail" : "Route"}
- **D√©nivel√© total de la course** : ${deniveleTotal} m√®tres
- **Dur√©e du plan** : ${weeksBeforeEvent} semaines (${today.toISOString().split("T")[0]} ‚Üí ${endDate.toISOString().split("T")[0]})
- **Fr√©quence d'entra√Ænement** : ${nbSeances} s√©ances par semaine (${joursSelectionnes.join(", ")})
- **Jour de la sortie longue** : ${sortieLongue}
- **Objectifs interm√©diaires** :
  ${objectifsIntermediaires.length > 0 
      ? objectifsIntermediaires.map(obj => `- ${obj.type} le ${obj.date}`).join("\n  ") 
      : "Aucun"}

### Personnalisation selon le profil :
- **VMA** : ${VMA ? VMA + " km/h" : "Non connue, estimez-la en fonction de l'√¢ge"}
- **FC Max** : ${FCMax ? FCMax + " bpm" : "Non connue"}
- **Allures de r√©f√©rence** : 
  - 5 km : ${allure5km ? allure5km : "Non connue"}
  - 10 km : ${allure10km ? allure10km : "Non connue"}
  - Semi-marathon : ${allureSemi ? allureSemi : "Non connue"}
  - Marathon : ${allureMarathon ? allureMarathon : "Non connue"}
- **Blessures pass√©es** : ${blessures ? blessures : "Aucune"}
- **Autres sports pratiqu√©s** : ${autresSports ? autresSports : "Aucun"}
- **Contraintes personnelles** : ${contraintes ? contraintes : "Aucune"}
- **Recommandations nutritionnelles** : ${nutrition ? nutrition : "Non pr√©cis√©es"}
- **M√©thodes de r√©cup√©ration privil√©gi√©es** : ${recuperation ? recuperation : "Non pr√©cis√©es"}

### Structure de l'entra√Ænement :
1. **Progression optimis√©e** :
   - Augmentation progressive de la charge pour √©viter les blessures.
   - Alternance entre phases de charge et r√©cup√©ration.
   - R√©duction progressive de la charge avant les courses interm√©diaires et l‚Äôobjectif final.

2. **Prise en compte des courses interm√©diaires** :
   - **R√©duction de charge avant une course** pour arriver en forme.
   - **R√©cup√©ration apr√®s une course** pour √©viter la fatigue excessive.
   - **Int√©gration des courses comme des s√©ances cl√©s**.

3. **S√©ances sp√©cifiques adapt√©es** :
   - **Endurance fondamentale** : consolidation de l‚Äôa√©robie.
   - **Fractionn√©/VMA** : am√©lioration de la puissance et de l‚Äô√©conomie de course.
   - **Seuil ana√©robie** : optimisation de la gestion de l‚Äôeffort prolong√©.
   - **C√¥tes et renforcement musculaire** : pr√©paration sp√©cifique au d√©nivel√©.
   - **Sorties longues** : d√©veloppement de l‚Äôendurance et de la r√©sistance mentale.

### R√©sultat attendu :
G√©n√®re un plan d'entra√Ænement hebdomadaire d√©taill√©, en pr√©cisant pour chaque jour :
- Type de s√©ance (endurance, fractionn√©, seuil‚Ä¶)
- Intensit√© (% VMA ou zones cardiaques)
- Dur√©e et volume total
- Conseils sp√©cifiques pour l'efficacit√© et la r√©cup√©ration
- **Adaptations en fonction des courses interm√©diaires** (r√©duction de charge et r√©cup√©ration)
Le plan doit √™tre structur√©, progressif et adapt√© au niveau de l‚Äôutilisateur.
    `;

    try {
        console.log("üìå Envoi du prompt √† l'IA...");
        const response = await openai.Completion.create({
            model: "gpt-4",
            prompt: prompt,
            max_tokens: 1500
        });

        const generatedPlan = response.choices[0].text.trim();
        console.log("‚úÖ R√©ponse IA re√ßue :", generatedPlan);

        // üîπ Enregistrement du plan en base de donn√©es
        console.log("üìå Enregistrement du plan en base de donn√©es...");
        const planArray = generatedPlan.split("\n\n");

        for (const session of planArray) {
            const [date, type, intensity, duration, details] = session.split("\n").map(line => line.trim());

            if (!date || !type) continue; // √âviter d'ins√©rer des lignes vides

            await db.query(
                `INSERT INTO trainings (user_id, date, type, intensity, duration, details, objectif_id, is_generated) 
                 VALUES ($1, $2, $3, $4, $5, $6, $7, TRUE)`,
                [userId, new Date(date), type, intensity, duration, details, objectifPrincipalId]
            );
        }

        console.log("‚úÖ Plan ins√©r√© en base !");
        return { success: true, plan: generatedPlan };

    } catch (error) {
        console.error("‚ùå Erreur lors de la g√©n√©ration du plan avec IA :", error);
        return { success: false, error: "Erreur lors de la g√©n√©ration du plan." };
    }
}

module.exports = generateTrainingPlanAI;
